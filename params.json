{"name":"codebird-php","tagline":"A Twitter library in PHP.","body":"codebird-php\r\n============\r\n*A Twitter library in PHP.*\r\n\r\n[![Download latest version from SourceForge](https://f.cloud.github.com/assets/157944/591288/9a6955f4-c9fe-11e2-8bca-15db918638ef.png)](https://sourceforge.net/projects/codebird-php.codebird.p/files/latest/download)\r\n\r\nCopyright (C) 2010-2013 J.M. &lt;me@mynetx.net&gt;\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n### Versions\r\n\r\n- JavaScript: https://github.com/mynetx/codebird-js\r\n- PHP: https://github.com/mynetx/codebird-php\r\n\r\n### Requirements\r\n\r\n- PHP 5.3.0 or higher\r\n- CURL extension\r\n- OpenSSL extension\r\n\r\n\r\n1. Authentication\r\n-----------------\r\n\r\nTo authenticate your API requests on behalf of a certain Twitter user\r\n(following OAuth 1.0a), take a look at these steps:\r\n\r\n```php\r\nrequire_once ('codebird.php');\r\n\\Codebird\\Codebird::setConsumerKey('YOURKEY', 'YOURSECRET'); // static, see 'Using multiple Codebird instances'\r\n\r\n$cb = \\Codebird\\Codebird::getInstance();\r\n```\r\n\r\nYou may either set the OAuth token and secret, if you already have them:\r\n```php\r\n$cb->setToken('YOURTOKEN', 'YOURTOKENSECRET');\r\n```\r\n\r\nOr you authenticate, like this:\r\n\r\n```php\r\nsession_start();\r\n\r\nif (! isset($_SESSION['oauth_token'])) {\r\n    // get the request token\r\n    $reply = $cb->oauth_requestToken(array(\r\n        'oauth_callback' => 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']\r\n    ));\r\n\r\n    // store the token\r\n    $cb->setToken($reply->oauth_token, $reply->oauth_token_secret);\r\n    $_SESSION['oauth_token'] = $reply->oauth_token;\r\n    $_SESSION['oauth_token_secret'] = $reply->oauth_token_secret;\r\n    $_SESSION['oauth_verify'] = true;\r\n\r\n    // redirect to auth website\r\n    $auth_url = $cb->oauth_authorize();\r\n    header('Location: ' . $auth_url);\r\n    die();\r\n\r\n} elseif (isset($_GET['oauth_verifier']) && isset($_SESSION['oauth_verify'])) {\r\n    // verify the token\r\n    $cb->setToken($_SESSION['oauth_token'], $_SESSION['oauth_token_secret']);\r\n    unset($_SESSION['oauth_verify']);\r\n\r\n    // get the access token\r\n    $reply = $cb->oauth_accessToken(array(\r\n        'oauth_verifier' => $_GET['oauth_verifier']\r\n    ));\r\n\r\n    // store the token (which is different from the request token!)\r\n    $_SESSION['oauth_token'] = $reply->oauth_token;\r\n    $_SESSION['oauth_token_secret'] = $reply->oauth_token_secret;\r\n\r\n    // send to same URL, without oauth GET parameters\r\n    header('Location: ' . basename(__FILE__));\r\n    die();\r\n}\r\n\r\n// assign access token on each page load\r\n$cb->setToken($_SESSION['oauth_token'], $_SESSION['oauth_token_secret']);\r\n```\r\n\r\n### 1.1. Application-only auth\r\n\r\nSome API methods also support authenticating on a per-application level.\r\nThis is useful for getting data that are not directly related to a specific\r\nTwitter user, but generic to the Twitter ecosystem (such as ```search/tweets```).\r\n\r\nTo obtain an app-only bearer token, call the appropriate API:\r\n\r\n```php\r\n$reply = $cb->oauth2_token();\r\n$bearer_token = $reply->access_token;\r\n```\r\n\r\nI strongly recommend that you store the obtained bearer token in your database.\r\nThere is no need to re-obtain the token with each page load, as it becomes invalid\r\nonly when you call the ```oauth2/invalidate_token``` method.\r\n\r\nIf you already have your token, tell Codebird to use it:\r\n```php\r\n\\Codebird\\Codebird::setBearerToken('YOURBEARERTOKEN');\r\n```\r\n\r\nFor sending an API request with app-only auth, see the ‘Usage examples’ section.\r\n\r\n\r\n2. Usage examples\r\n-----------------\r\n\r\nWhen you have an access token, calling the API is simple:\r\n\r\n```php\r\n$cb->setToken($_SESSION['oauth_token'], $_SESSION['oauth_token_secret']); // see above\r\n\r\n$reply = (array) $cb->statuses_homeTimeline();\r\nprint_r($reply);\r\n```\r\n\r\nTweeting is as easy as this:\r\n\r\n```php\r\n$reply = $cb->statuses_update('status=Whohoo, I just tweeted!');\r\n```\r\n\r\nFor more complex parameters (see the [Twitter API documentation](https://dev.twitter.com/)),\r\ngiving all parameters in an array is supported, too:\r\n\r\n```php\r\n$params = array(\r\n    'screen_name' => 'mynetx'\r\n);\r\n$reply = $cb->users_show($params);\r\n```\r\n\r\nWhen **uploading files to Twitter**, the array syntax is obligatory:\r\n\r\n```php\r\n$params = array(\r\n    'status' => 'Look at this crazy cat! #lolcats',\r\n    'media[]' => '/home/mynetx/lolcats.jpg'\r\n);\r\n$reply = $cb->statuses_updateWithMedia($params);\r\n```\r\n\r\n### Requests with app-only auth\r\n\r\nTo send API requests without an access token for a user (app-only auth),\r\nadd a second parameter to your method call, like this:\r\n\r\n```php\r\n$reply = $cb->search_tweets('q=Twitter', true);\r\n```\r\n\r\nBear in mind that not all API methods support application-only auth.\r\n\r\n3. Mapping API methods to Codebird function calls\r\n-------------------------------------------------\r\n\r\nAs you can see from the last example, there is a general way how Twitter’s API methods\r\nmap to Codebird function calls. The general rules are:\r\n\r\n1. For each slash in a Twitter API method, use an underscore in the Codebird function.\r\n\r\n    Example: ```statuses/update``` maps to ```Codebird::statuses_update()```.\r\n\r\n2. For each underscore in a Twitter API method, use camelCase in the Codebird function.\r\n\r\n    Example: ```statuses/home_timeline``` maps to ```Codebird::statuses_homeTimeline()```.\r\n\r\n3. For each parameter template in method, use UPPERCASE in the Codebird function.\r\n    Also don’t forget to include the parameter in your parameter list.\r\n\r\n    Examples:\r\n    - ```statuses/show/:id``` maps to ```Codebird::statuses_show_ID('id=12345')```.\r\n    - ```users/profile_image/:screen_name``` maps to\r\n      ```Codebird::users_profileImage_SCREEN_NAME('screen_name=mynetx')```.\r\n\r\n4. HTTP methods (GET, POST, DELETE etc.)\r\n----------------------------------------\r\n\r\nNever care about which HTTP method (verb) to use when calling a Twitter API.\r\nCodebird is intelligent enough to find out on its own.\r\n\r\n5. Response codes\r\n-----------------\r\n\r\nThe HTTP response code that the API gave is included in any return values.\r\nYou can find it within the return object’s ```httpstatus``` property.\r\n\r\n### 5.1 Dealing with rate-limits\r\n\r\nBasically, Codebird leaves it up to you to handle Twitter’s rate limit.  \r\nThe library returns the response HTTP status code, so you can detect rate limits.\r\n\r\nI suggest you to check if the ```$reply->httpstatus``` property is ```400``` \r\nand check with the Twitter API to find out if you are currently being \r\nrate-limited. \r\nSee the [Rate Limiting FAQ](https://dev.twitter.com/docs/rate-limiting-faq) \r\nfor more information.\r\n\r\n6. Return formats\r\n-----------------\r\nThe default return format for API calls is a PHP object.\r\nFor API methods returning multiple data (like ```statuses/home_timeline```),\r\nyou should cast the reply to array, like this:\r\n\r\n```php\r\n$reply = $cb->statuses_homeTimeline();\r\n$data = (array) $reply;\r\n```\r\n\r\nUpon your choice, you may also get PHP arrays directly:\r\n\r\n```php\r\n$cb->setReturnFormat(CODEBIRD_RETURNFORMAT_ARRAY);\r\n```\r\n\r\nThe Twitter API natively responds to API calls in JSON (JS Object Notation).\r\nTo get a JSON string, set the corresponding return format:\r\n\r\n```php\r\n$cb->setReturnFormat(CODEBIRD_RETURNFORMAT_JSON);\r\n```\r\n\r\nSupport for getting a SimpleXML object is planned.\r\n\r\n7. Using multiple Codebird instances\r\n------------------------------------\r\n\r\nBy default, Codebird works with just one instance. This programming paradigma is\r\ncalled a *singleton*.\r\n\r\nGetting the main Codebird object is done like this:\r\n\r\n```php\r\n$cb = \\Codebird\\Codebird::getInstance();\r\n```\r\n\r\nIf you need to run requests to the Twitter API for multiple users at once,\r\nCodebird supports this as well. Instead of getting the instance like shown above,\r\ncreate a new object:\r\n\r\n```php\r\n$cb1 = new \\Codebird\\Codebird;\r\n$cb2 = new \\Codebird\\Codebird;\r\n```\r\n\r\nPlease note that your OAuth consumer key and secret is shared within\r\nmultiple Codebird instances, while the OAuth request and access tokens with their\r\nsecrets are *not* shared.\r\n\r\nHow Do I…?\r\n==========\r\n\r\n…access a user’s profile image?\r\n-------------------------------\r\n\r\nFirst retrieve the user object using\r\n\r\n```$reply = $cb->users_show(\"screen_name=$username\");```\r\n\r\n\r\nwith ```$username``` being the username of the account you wish to retrieve the profile image from.\r\n\r\nThen get the value from the index ```profile_image_url``` or ```profile_image_url_https``` of the user object previously retrieved. \r\n\r\n\r\nFor example:\r\n\r\n```$reply['profile_image_url']``` will then return the profile image url without https.\r\n\r\n…get user ID, screen name and more details about the current user?\r\n------------------------------------------------------------------\r\n\r\nWhen the user returns from the authentication screen, you need to trade\r\nthe obtained request token for an access token, using the OAuth verifier.\r\nAs discussed in the section ‘Usage example,’ you use a call to \r\n```oauth/access_token``` to do that.\r\n\r\nThe API reply to this method call tells you details about the user that just logged in.\r\nThese details contain the **user ID** and the **screen name.**\r\n\r\nTake a look at the returned data as follows:\r\n\r\n```\r\nstdClass Object\r\n(\r\n    [oauth_token] => 14648265-rPn8EJwfB**********************\r\n    [oauth_token_secret] => agvf3L3**************************\r\n    [user_id] => 14648265\r\n    [screen_name] => mynetx\r\n    [httpstatus] => 200\r\n) \r\n```\r\n\r\nIf you need to get more details, such as the user’s latest tweet, \r\nyou should fetch the complete User Entity.  The simplest way to get the \r\nuser entity of the currently authenticated user is to use the \r\n```account/verify_credentials``` API method.  In Codebird, it works like this:\r\n\r\n```php\r\n$reply = $cb->account_verifyCredentials();\r\nprint_r($reply);\r\n```\r\n\r\nI suggest to cache the User Entity after obtaining it, as the \r\n```account/verify_credentials``` method is rate-limited by 15 calls per 15 minutes. \r\n\r\n…walk through cursored results?\r\n-------------------------------\r\n\r\nThe Twitter REST API utilizes a technique called ‘cursoring’ to paginate \r\nlarge result sets. Cursoring separates results into pages of no more than \r\n5000 results at a time, and provides a means to move backwards and \r\nforwards through these pages. \r\n\r\nHere is how you can walk through cursored results with Codebird.\r\n\r\n1. Get the first result set of a cursored method:\r\n```php\r\n$result1 = $cb->followers_list();\r\n```\r\n\r\n2. To navigate forth, take the ```next_cursor_str```:\r\n```php\r\n$nextCursor = $result1->next_cursor_str;\r\n```\r\n\r\n3. If ```$nextCursor``` is not 0, use this cursor to request the next result page:\r\n```php\r\n    if ($nextCursor > 0) {\r\n        $result2 = $cb->followers_list('cursor=' . $nextCursor);\r\n    }\r\n```\r\n\r\nTo navigate back instead of forth, use the field ```$resultX->previous_cursor_str``` \r\ninstead of ```next_cursor_str```.\r\n\r\nIt might make sense to use the cursors in a loop.  Watch out, though, \r\nnot to send more than the allowed number of requests to ```followers/list``` \r\nper rate-limit timeframe, or else you will hit your rate-limit.\r\n\r\n…use xAuth with Codebird?\r\n-------------------------\r\n\r\nCodebird supports xAuth just like every other authentication used at Twitter.\r\nRemember that your application needs to be whitelisted to be able to use xAuth.\r\n\r\nHere’s an example:\r\n```php\r\n$reply = $cb->oauth_accessToken(array(\r\n    'x_auth_username' => 'username',\r\n    'x_auth_password' => '4h3_p4$$w0rd',\r\n    'x_auth_mode' => 'client_auth'\r\n));\r\n```\r\n\r\nAre you getting a strange error message?  If the user is enrolled in \r\nlogin verification, the server will return a HTTP 401 error with a custom body. \r\nIf you are using the send_error_codes parameter, you will receive the \r\nfollowing error message in the response body:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<errors>\r\n<error code=\"231\">User must verify login</error>\r\n</errors>\r\n```\r\n\r\nOtherwise, the response body will contain a plaintext response:\r\n```\r\nUser must verify login\r\n```\r\n\r\nWhen this error occurs, advise the user to \r\n[generate a temporary password](https://twitter.com/settings/applications)\r\non twitter.com and use that to complete signing in to the application.\r\n","google":"UA-2369753-9","note":"Don't delete this file! It's used internally to help with page regeneration."}